local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Main/main/Library/V3.lua"))()
loadstring(game:HttpGet("https://raw.githubusercontent.com/adopttesting/Testing/refs/heads/main/Settings"))()


local Window = Library:MakeWindow({
    Title = "Lite Hub | " .. Version,
    SaveFolder = "Lite Hub"
})
Window:AddMinimizeButton({
    Button = {Image = "rbxassetid://16022917595"},
    Corner = {CornerRadius = UDim.new(0, 5)}
})

local AutoFishing = Window:MakeTab({"Auto Fishing", ""})

task.spawn(function()
    if game.Workspace:FindFirstChild("RobloxForwardPortals") then
        game.Workspace.RobloxForwardPortals:Destroy()
    end
end)

local SpeedHubX = {}

local function Toggle(Tab, Name, Desc, Default)
    local Ver = Tab:AddToggle({
        Name = Name,
        Description = Desc or "",
        Default = Default,
        Callback = function(Value)
            SpeedHubX[Name] = Value
        end
    })
    return Ver
end

local function Dropdown(Tab, Name, Desc, Option, Default)
    local Ver = Tab:AddDropdown({
        Name = Name,
        Description = Desc or "",
        Options = Option,
        Default = Default,
        Callback = function(Value)
            SpeedHubX[Name] = Value
        end
    })
    return Ver
end

local function Silder(Tab, Name, Min, Max, Default)
    local Ver = Tab:AddSlider({
        Name = Name,
        Min = Min,
        Max = Max,
        Default = Default,
        Callback = function(Value)
            SpeedHubX[Name] = Value
        end
    })
    return Ver
end

AutoFishing:AddSection({"Rods"})

-- Add all rods to the dropdown
local rods = {
    "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod",
    "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod",
    "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod",
    "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod",
    "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod",
    "Kings Rod", "Aurora Rod", "Scurvy Rod"
}

Dropdown(AutoFishing, "Choose Rod", "", rods, "")

Toggle(AutoFishing, "Auto Equip Rod", "", false)
Toggle(AutoFishing, "Auto Cast", "", false)
Toggle(AutoFishing, "Auto Reel", "", false)
Toggle(AutoFishing, "Auto Shake", "", false)

-- Variables for toggles
local selectedRod = ""
local toggles = {
    AutoEquipRod = false,
    AutoCast = false,
    AutoReel = false,
    AutoShake = false
}

-- Event Handlers
Library:AddConnection(game:GetService("RunService").Stepped, function()
    selectedRod = SpeedHubX["Choose Rod"]
    
    if toggles.AutoEquipRod and selectedRod ~= "" then
        local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(selectedRod)
        if tool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
        end
    end

    if toggles.AutoCast and selectedRod ~= "" then
        local tool = game.Players.LocalPlayer.Character:FindFirstChild(selectedRod)
        if tool and tool:FindFirstChild("events") and tool.events:FindFirstChild("cast") then
            local args = {23.7, 1}
            tool.events.cast:FireServer(unpack(args))
        end
    end

    if toggles.AutoReel then
        local args = {100, true}
        game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished"):FireServer(unpack(args))
    end
end)

local autoShakeConnection

-- Toggle Handlers
SpeedHubX["Auto Equip Rod"] = function(value)
    toggles.AutoEquipRod = value
end

SpeedHubX["Auto Cast"] = function(value)
    toggles.AutoCast = value
end

SpeedHubX["Auto Reel"] = function(value)
    toggles.AutoReel = value
end

SpeedHubX["Auto Shake"] = function(value)
    if value then
        if not autoShakeConnection then
            autoShakeConnection = game:GetService("RunService").Stepped:Connect(function()
                keypress(Enum.KeyCode.BackSlash)
                wait(0.1)
                keypress(Enum.KeyCode.S)
                wait(0.1)
                keypress(Enum.KeyCode.Return)
            end)
        end
    else
        if autoShakeConnection then
            autoShakeConnection:Disconnect()
            autoShakeConnection = nil
            keypress(Enum.KeyCode.BackSlash)
        end
    end
end
