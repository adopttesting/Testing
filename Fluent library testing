local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Create Main Window
local Window = Fluent:CreateWindow({
    Title = "Lite Hub | Version 1.0.0",
    SubTitle = "by Adopt",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.R,
}) 

--// Services
local Players = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService = cloneref(game:GetService('RunService'))
local GuiService = cloneref(game:GetService('GuiService'))

--variables
local lp = game.Players.LocalPlayer

--function
FindChildOfClass = function(parent, classname)
    return parent:FindFirstChildOfClass(classname)
end
FindChild = function(parent, child)
    return parent:FindFirstChild(child)
end
FindChildOfType = function(parent, childname, classname)
    child = parent:FindFirstChild(childname)
    if child and child.ClassName == classname then
        return child
    end
end

--// Custom Functions
getchar = function()
    return lp.Character or lp.CharacterAdded:Wait()
end

-- Tabs
local Tabs = {
    AutoFishing = Window:AddTab({ Title = "Auto Fishing", Icon = "" }),
    Automatically = Window:AddTab({ Title = "Automatically", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "settings" }),
}

-- Auto Fishing: Dropdown to Select Rod
local RodDropdown = Tabs.AutoFishing:AddDropdown("Select Rod", {
    Title = "Select Rod",
    Values = {
        "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod", 
        "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod", 
        "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod", 
        "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod", 
        "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod", 
        "Kings Rod", "Aurora Rod", "Scurvy Rod"
    },
    Multi = false,
    Default = 1,
})
RodDropdown:SetValue("Flimsy Rod")

-- Auto Fishing: Equip Rod Toggle
local EquipRodToggle = Tabs.AutoFishing:AddToggle("Equip Rod", {
    Title = "Equip Rod",
    Default = false,
})
EquipRodToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    while EquipRodToggle.Value do
        local selectedRod = RodDropdown.Value
        local rodTool = backpack:FindFirstChild(selectedRod) or player.Character:FindFirstChild(selectedRod)

        if rodTool and backpack:FindFirstChild(selectedRod) then
            rodTool.Parent = player.Character
        end
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Cast Toggle
local AutoCastToggle = Tabs.AutoFishing:AddToggle("Auto Cast", {
    Title = "Auto Cast",
    Default = false,
})
AutoCastToggle:OnChanged(function()
    while AutoCastToggle.Value do
        local selectedRod = RodDropdown.Value
        local args = { [1] = 23.7, [2] = 1 }
        game:GetService("Players").LocalPlayer.Character:FindFirstChild(selectedRod).events.cast:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Reel Toggle
local AutoReelToggle = Tabs.AutoFishing:AddToggle("Auto Reel", {
    Title = "Auto Reel",
    Default = false,
})
AutoReelToggle:OnChanged(function()
    while AutoReelToggle.Value do
        local args = { [1] = 100, [2] = true }
        game:GetService("ReplicatedStorage").events.reelfinished:FireServer(unpack(args))
        wait(0.5)
    end
end)

local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService('VirtualInputManager')

-- Create Auto Shake Toggle
local AutoShakeToggle = Tabs.AutoFishing:AddToggle("Auto Shake", {
    Title = "Auto Shake",
    Default = false
})

local isShaking = false  -- Flag to track the shaking status

-- Function to shake the button (select and simulate key press)
local function shakeButton()
    -- Check if necessary UI elements exist
    local shakeUI = FindChild(lp.PlayerGui, 'shakeui')
    if not shakeUI then return end
    local safezone = FindChild(shakeUI, 'safezone')
    if not safezone then return end
    local button = FindChild(safezone, 'button')
    if not button then return end

    -- Set the selected object to the button if it's not already set
    if GuiService.SelectedObject ~= button then
        GuiService.SelectedObject = button
    end
    
    -- Simulate pressing Enter key (Return key)
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
end

AutoShakeToggle:OnChanged(function(State)
    if State then
        -- Start shaking the button
        isShaking = true
        while isShaking do
            shakeButton()
            wait(0.1)  -- Delay to prevent overloading the game with actions (adjust as needed)
        end
    else
        -- Stop shaking the button when toggle is off
        isShaking = false
    end
end)

-- Auto Fishing: Fishing Area Paragraph
local FishingAreaParagraph = Tabs.AutoFishing:AddParagraph({
    Title = "Fishing Area",
    Description = "Select an area to teleport to and start fishing.",
})

-- Auto Fishing: Dropdown to Select Area
local AreaDropdown = Tabs.AutoFishing:AddDropdown("Select Area", {
    Title = "Select Area",
    Values = {
        "Ancient Isle Pond", "Ancient Isle Waterfall", "Brine Pool", "Desolate Deep", "Forsaken Shores", 
        "Forsaken Shores Pond", "Frigid Cavern", "Glacial Grotto", "Grand Reef", "Lava", "Moosewood Docks", 
        "Moosewood Pond", "Overgrowth Cave", "Roslit Bay Clam", "Roslit Pond", "Snowcap Pond", "Sunstone Island", 
        "Terrapin Olm", "The Depths", "Vertigo"
    },
    Multi = false,
    Default = 1,
})
AreaDropdown:SetValue("Ancient Isle Pond")

-- Coordinates for Fishing Areas
local fishingAreaCoordinates = {
    ["Ancient Isle Pond"] = CFrame.new(6014.65869, 179.835037, 330.316071),
    ["Ancient Isle Waterfall"] = CFrame.new(5951.72217, 216.185043, 502.174011),
    ["Brine Pool"] = CFrame.new(-1796.38306, -223.383011, -3345.58813),
    ["Desolate Deep"] = CFrame.new(-1678.24756, -306.582123, -3091.30835),
    ["Forsaken Shores"] = CFrame.new(-2654.87134, 102.072525, 1465.56531),
    ["Forsaken Shores Pond"] = CFrame.new(-2701.30591, 148.872528, 1750.0592),
    ["Frigid Cavern"] = CFrame.new(19893.125, 420.223022, 5607.42432),
    ["Glacial Grotto"] = CFrame.new(20051.2031, 854.765625, 5634.33643),
    ["Grand Reef"] = CFrame.new(-3576.57349, 11.7025375, 541.630493),
    ["Lava"] = CFrame.new(-1966.19263, 132.647018, 274.75293),
    ["Moosewood Docks"] = CFrame.new(345.802917, 54.9887085, 261.252319),
    ["Moosewood Pond"] = CFrame.new(525.744507, 137.410004, 283.821625),
    ["Overgrowth Cave"] = CFrame.new(20304.0938, 253.568161, 5525.65771),
    ["Roslit Bay Clam"] = CFrame.new(-2028.79443, 54.9887085, 541.784424),
    ["Roslit Pond"] = CFrame.new(-1761.38428, 134.953812, 596.431946),
    ["Snowcap Pond"] = CFrame.new(2789.34741, 262.703033, 2613.31104),
    ["Sunstone Island"] = CFrame.new(-1139.38635, 26.3850517, -1076.26379),
    ["Terrapin Olm"] = CFrame.new(22.0643902, 98.3850555, 1944.36792),
    ["The Depths"] = CFrame.new(745.830139, -770.311462, 1250.17554),
    ["Vertigo"] = CFrame.new(-129.634705, -808.458923, 1203.53235),
}



-- Auto Fishing: Freeze After Teleport Toggle
local FreezeAfterTeleportToggle = Tabs.AutoFishing:AddToggle("Freeze After Teleport", {
    Title = "Freeze After Teleport",
    Default = false,
})

-- Auto Fishing: Teleport to Area Button with Freeze Option
Tabs.AutoFishing:AddButton({
    Title = "Teleport To Area",
    Description = "Teleport to the selected fishing area and freeze if enabled.",
    Callback = function()
        local selectedArea = AreaDropdown.Value
        local targetCFrame = fishingAreaCoordinates[selectedArea]

        if targetCFrame then
            local player = game:GetService("Players").LocalPlayer
            local char = player.Character or player:WaitForChild("Character")
            local root = char:FindFirstChild("HumanoidRootPart")

            if root then
                root.CFrame = targetCFrame
            else
                warn("HumanoidRootPart not found!")
            end

            -- Freeze player if the toggle is on
            if FreezeAfterTeleportToggle.Value then
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = true  -- Freeze the player
                end
            end
        else
            warn("Coordinates for the selected area not found!")
        end
    end
})

-- Function to Unfreeze Player (Called when the toggle is turned off)
FreezeAfterTeleportToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local char = player.Character or player:WaitForChild("Character")
    
    if not FreezeAfterTeleportToggle.Value then
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false  -- Unfreeze the player
        end
    end
end)

-- Automatically Tab: Sell All Button
Tabs.Automatically:AddButton({
    Title = "Sell All",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").events.SellAll:InvokeServer()
    end,
})

-- Teleport Tab: Island Dropdown
local IslandDropdown = Tabs.Teleport:AddDropdown("Select Island", {
    Title = "Select Island",
    Values = {
        "Terrapin Island", "Sunstone Island", "Statue Of Sovereignty", 
        "Snowcap Island", "Mushgrove Swamp", "Roslit Bay", "Moosewood", 
        "Forsaken Shores", "Atlantis", "Ancient Isle", "Northern Expedition", 
        "Northern Summit", "Vertigo", "Depths Entrance", "Depths", 
        "Overgrowth Caves", "Frigid Cavern", "Cryogenic Canal", "Glacial Grotto", 
        "Keeper's Altar"
    },
    Multi = false,
    Default = 1,
})
IslandDropdown:SetValue("Terrapin Island")

-- Teleport Tab: Teleport Toggle
local TeleportToggle = Tabs.Teleport:AddToggle("Teleport To Island", {
    Title = "Teleport To Island",
    Default = false,
})

-- Island Coordinates (Updated with new islands)
local islandCoordinates = {
    ["Terrapin Island"] = CFrame.new(-193.434143, 135.121979, 1951.46936, 0.512723684, -6.94711346e-08, 0.858553708, 5.44089183e-08, 1, 4.84237539e-08, -0.858553708, 2.18849721e-08, 0.512723684),
    ["Sunstone Island"] = CFrame.new(-913.809143, 138.160782, -1133.25879, -0.746701241, 4.50330218e-09, 0.665159583, 2.84934609e-09, 1, -3.5716119e-09, -0.665159583, -7.71657294e-10, -0.746701241),
    ["Statue Of Sovereignty"] = CFrame.new(21.4017925, 159.014709, -1039.14233, -0.865476549, -4.38348664e-08, -0.500949502, -9.38435818e-08, 1, 7.46273798e-08, 0.500949502, 1.11599142e-07, -0.865476549),
    ["Snowcap Island"] = CFrame.new(2607.93018, 135.284332, 2436.13208, 0.909039497, -7.49003748e-10, 0.4167099, 3.38659367e-09, 1, -5.59032465e-09, -0.4167099, 6.49305321e-09, 0.909039497),
    ["Mushgrove Swamp"] = CFrame.new(2434.29785, 131.983276, -691.930542, -0.123090521, -7.92820209e-09, -0.992395461, -9.05862692e-08, 1, 3.2467995e-09, 0.992395461, 9.02970569e-08, -0.123090521),
    ["Roslit Bay"] = CFrame.new(-1472.9812, 132.525513, 707.644531, -0.00177415239, 1.15743369e-07, -0.99999845, -9.25943056e-09, 1, 1.15759981e-07, 0.99999845, 9.46479251e-09, -0.00177415239),
    ["Moosewood"] = CFrame.new(379.875458, 134.500519, 233.5495, -0.033920113, 8.13274355e-08, 0.999424577, 8.98441925e-08, 1, -7.83249803e-08, -0.999424577, 8.7135696e-08, -0.033920113),
    ["Forsaken Shores"] = CFrame.new(-2491.104, 133.250015, 1561.2926, 0.355353981, -1.68352852e-08, -0.934731781, 4.69647858e-08, 1, -1.56367586e-10, 0.934731781, -4.38439116e-08, 0.355353981),
    ["Atlantis"] = CFrame.new(-3572.75, 171.767273, 513.625, 0.355353981, -1.68352852e-08, -0.934731781, 4.69647858e-08, 1, -1.56367586e-10, 0.934731781, -4.38439116e-08, 0.355353981),
    ["Ancient Isle"] = CFrame.new(6056.02783, 195.280167, 276.270325, -0.655055285, 1.96010075e-09, 0.755580962, -1.63855578e-08, 1, -1.67997189e-08, -0.755580962, -2.33853594e-08, -0.655055285),
    ["Northern Expedition"] = CFrame.new(-1701.02979, 187.638779, 3944.81494, 0.918493569, -8.5804345e-08, 0.395435959, 8.59132356e-08, 1, 1.74328942e-08, -0.395435959, 1.7961181e-08, 0.918493569),
    ["Northern Summit"] = CFrame.new(19608.791, 131.420105, 5222.15283, 0.462794542, -2.64426987e-08, 0.886465549, -4.47066562e-08, 1, 5.31692343e-08, -0.886465549, -6.42373408e-08, 0.462794542),
    ["Vertigo"] = CFrame.new(-102.40567, -513.299377, 1052.07104, -0.999989033, 5.36423439e-09, 0.00468267547, 5.85247495e-09, 1, 1.04251647e-07, -0.00468267547, 1.04277916e-07, -0.999989033),
    ["Depths Entrance"] = CFrame.new(-15.4965982, -706.123718, 1231.43494, 0.0681341439, 1.15903154e-08, -0.997676194, 7.1017638e-08, 1, 1.64673093e-08, 0.997676194, -7.19745898e-08, 0.0681341439),
    ["Depths"] = CFrame.new(491.758118, -706.123718, 1230.6377, 0.00879980437, 1.29271776e-08, -0.999961257, 1.95575205e-13, 1, 1.29276803e-08, 0.999961257, -1.13956629e-10, 0.00879980437),
    ["Overgrowth Caves"] = CFrame.new(19746.2676, 416.00293, 5403.5752, 0.488031536, -3.30940715e-08, -0.87282598, -3.24267696e-11, 1, -3.79341323e-08, 0.87282598, 1.85413569e-08, 0.488031536),
    ["Frigid Cavern"] = CFrame.new(20253.6094, 756.525818, 5772.68555, -0.781508088, 1.85673343e-08, 0.623895109, 5.92671467e-09, 1, -2.23363816e-08, -0.623895109, -1.3758414e-08, -0.781508088),
    ["Cryogenic Canal"] = CFrame.new(19958.5176, 917.195923, 5332.59375, 0.758922458, -7.29783434e-09, 0.651180983, -4.58880756e-09, 1, 1.65551253e-08, -0.651180983, -1.55522013e-08, 0.758922458),
    ["Glacial Grotto"] = CFrame.new(20003.0273, 1136.42798, 5555.95996, 0.983130038, -3.94455064e-08, 0.182907909, 3.45229765e-08, 1, 3.0096718e-08, -0.182907909, -2.32744615e-08, 0.983130038),
    ["Keeper's Altar"] = CFrame.new(1297.92285, -805.292236, -284.155823, -0.99758029, 5.80044706e-08, -0.0695239156, 6.16549869e-08, 1, -5.03615105e-08, 0.0695239156, -5.45261436e-08, -0.99758029)
}

TeleportToggle:OnChanged(function()
    if TeleportToggle.Value then
        local selectedIsland = IslandDropdown.Value
        local targetPos = islandCoordinates[selectedIsland]

        if targetPos then
            local player = game:GetService("Players").LocalPlayer
            local char = player.Character or player:WaitForChild("Character")
            local root = char:FindFirstChild("HumanoidRootPart")

            if root then
                root.CFrame = targetPos
            else
                warn("HumanoidRootPart not found!")
            end
        else
            warn("Coordinates for the selected island not found!")
        end
    end
end)
