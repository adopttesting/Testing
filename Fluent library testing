        while AutoShakeToggle.Value do
            -- Simulate pressing "S"
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.S, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, nil)
            wait(0.1)  -- Small delay to simulate pressing "S"

            -- Simulate pressing "Enter"
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)
            wait(0.35)  -- Small delay to simulate pressing "Enter"
        end
    else
        -- Deactivate navigation mode when toggle is turned off
        if pressedBackslash then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.BackSlash, false, nil)
            pressedBackslash = false
        end
    end
end)

-- Create Freeze Local Player Toggle
local FreezeLocalPlayerToggle = Tabs.AutoFiching:AddToggle("Freeze Local Player", {
    Title = "",
    Default = false
})

FreezePlayerToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        while FreezePlayerToggle.Value do
            -- Freeze the player's movement
            humanoid.PlatformStand = true
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            wait(0.1)  -- Check every 0.1 seconds to see if the toggle is still on
        end
        -- Unfreeze the player when the toggle is turned off
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end)
