local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Lite Hub",
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 410),
    Acrylic = true,
    Theme = "Aqua",
})

local screenGui = Instance.new("ScreenGui")
local imageButton = Instance.new("ImageButton")
local uiCorner = Instance.new("UICorner")

screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

imageButton.Parent = screenGui
imageButton.Size = UDim2.new(0, 45, 0, 45)
imageButton.Position = UDim2.new(0.2, 0, 0.4, 0)
imageButton.AnchorPoint = Vector2.new(0.5, 0.5)
imageButton.Image = "rbxassetid://86093303748141"

uiCorner.Parent = imageButton
uiCorner.CornerRadius = UDim.new(0, 10)

local isMinimized = false
local isDragging = false
local dragStart
local startPos

local function toggleWindow()
    if isMinimized then
        -- Restore the window
        Window.Minimized = false
        isMinimized = false
        print("Window Restored!")
    else
        -- Minimize the window
        Window.Minimized = true
        isMinimized = true
        print("Window Minimized!")
    end
end

-- Make the button draggable
imageButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        -- Start dragging
        isDragging = true
        dragStart = input.Position
        startPos = imageButton.Position
    elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
        -- When the button is clicked, toggle the window
        toggleWindow()
    end
end)

imageButton.InputChanged:Connect(function(input)
    if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        imageButton.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

imageButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        -- Stop dragging the button
        isDragging = false
    end
end)

-- Tabs
local Tabs = {
    AutoFishing = Window:AddTab({ Title = "Auto Fishing", Icon = "" }),
    Automatically = Window:AddTab({ Title = "Automatically", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "settings" }),
}

-- Auto Fishing: Dropdown to Select Rod
local RodDropdown = Tabs.AutoFishing:AddDropdown("Select Rod", {
    Title = "Select Rod",
    Values = {
        "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod", 
        "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod", 
        "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod", 
        "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod", 
        "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod", 
        "Kings Rod", "Aurora Rod", "Scurvy Rod"
    },
    Multi = false,
    Default = 1,
})
RodDropdown:SetValue("Flimsy Rod")

-- Auto Fishing: Equip Rod Toggle
local EquipRodToggle = Tabs.AutoFishing:AddToggle("Equip Rod", {
    Title = "Equip Rod",
    Default = false,
})
EquipRodToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    while EquipRodToggle.Value do
        local selectedRod = RodDropdown.Value
        local rodTool = backpack:FindFirstChild(selectedRod) or player.Character:FindFirstChild(selectedRod)

        if rodTool and backpack:FindFirstChild(selectedRod) then
            rodTool.Parent = player.Character
        end
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Cast Toggle
local AutoCastToggle = Tabs.AutoFishing:AddToggle("Auto Cast", {
    Title = "Auto Cast",
    Default = false,
})
AutoCastToggle:OnChanged(function()
    while AutoCastToggle.Value do
        local selectedRod = RodDropdown.Value
        local args = { [1] = 23.7, [2] = 1 }
        game:GetService("Players").LocalPlayer.Character:FindFirstChild(selectedRod).events.cast:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Reel Toggle
local AutoReelToggle = Tabs.AutoFishing:AddToggle("Auto Reel", {
    Title = "Auto Reel",
    Default = false,
})
AutoReelToggle:OnChanged(function()
    while AutoReelToggle.Value do
        local args = { [1] = 100, [2] = true }
        game:GetService("ReplicatedStorage").events.reelfinished:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Create Auto Shake Toggle
local AutoShakeToggle = Tabs.AutoFishing:AddToggle("Auto Shake", {
    Title = "Auto Shake",
    Default = false
})

AutoShakeToggle:OnChanged(function()
    local VirtualInputManager = game:GetService("VirtualInputManager")  -- Correct service for simulating input
    local pressedBackslash = false  -- Track if "\" has already been pressed

    if AutoShakeToggle.Value then
        -- Step 1: Activate navigation mode by pressing "\"
        if not pressedBackslash then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.BackSlash, false, nil)
            pressedBackslash = true
            wait(0.3)  -- Give some time for the input to be processed
        end

        -- Step 2: Press "D" four times
        for i = 1, 4 do
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.D, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, nil)
            wait(0.1)  -- Small delay to simulate pressing "D"
        end

        -- Step 3: Press "Enter"
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)
        wait(0.3)  -- Small delay to simulate pressing "Enter"

        -- Step 5: Add a 2-second wait before starting the regular "S" and "Enter" presses
        wait(2)  -- Wait for 2 seconds before proceeding to regular action

        -- Step 6: Regular "S" and "Enter" simulation
        while AutoShakeToggle.Value do
            -- Simulate pressing "S"
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.S, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, nil)
            wait(0.1)  -- Small delay to simulate pressing "S"

            -- Simulate pressing "Enter"
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)
            wait(0.35)  -- Small delay to simulate pressing "Enter"
        end
    else
        -- Deactivate navigation mode when toggle is turned off
        if pressedBackslash then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.BackSlash, false, nil)
            pressedBackslash = false
        end
    end
end)

-- Create Auto Shake Debug Button
Tabs.AutoFishing:AddButton({
    Title = "Auto Shake Debug",
    Description = "Only If Needed",
    Callback = function()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        
        -- Simulate pressing Left Control (KeyCode.LeftControl)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.LeftControl, false, nil)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.LeftControl, false, nil)
    end
})

-- Automatically Tab: Sell All Button
Tabs.Automatically:AddButton({
    Title = "Sell All",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").events.SellAll:InvokeServer()
    end,
})

-- Teleport Tab: Island Dropdown
local IslandDropdown = Tabs.Teleport:AddDropdown("Select Island", {
    Title = "Select Island",
    Values = {
        "Terrapin Island", "Sunstone Island", "Statue Of Sovereignty", 
        "Snowcap Island", "Mushgroove Island", "Roslit Bay", "Moosewood", 
        "Forsaken Shores", "Atlantis", "Ancient Island"
    },
    Multi = false,
    Default = 1,
})
IslandDropdown:SetValue("Terrapin Island")

-- Teleport Tab: Teleport Toggle
local TeleportToggle = Tabs.Teleport:AddToggle("Teleport To Island", {
    Title = "Teleport To Island",
    Default = false,
})
local islandCoordinates = {
    ["Terrapin Island"] = Vector3.new(50.32, 297.99, 1992.42),
    ["Sunstone Island"] = Vector3.new(-1035.39, 427.59, -1144.09),
    ["Statue Of Sovereignty"] = Vector3.new(-13.02, 381.09, -1128.81),
    -- Add remaining island coordinates here
}
TeleportToggle:OnChanged(function()
    if TeleportToggle.Value then
        local selectedIsland = IslandDropdown.Value
        local targetPos = islandCoordinates[selectedIsland]

        if targetPos then
            local player = game:GetService("Players").LocalPlayer
            local char = player.Character or player:WaitForChild("Character")
            local root = char:FindFirstChild("HumanoidRootPart")

            if root then
                root.CFrame = CFrame.new(targetPos)
            else
                warn("HumanoidRootPart not found!")
            end
        else
            warn("Coordinates for the selected island not found!")
        end
    end
end)

