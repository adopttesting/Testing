local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Create Main Window
local Window = Fluent:CreateWindow({
    Title = "Lite Hub",
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 380),
    Acrylic = true,
    Theme = "Aqua",
    MinimizeKey = Enum.KeyCode.R,
}) 

-- Tabs
local Tabs = {
    AutoFishing = Window:AddTab({ Title = "Auto Fishing", Icon = "" }),
    Automatically = Window:AddTab({ Title = "Automatically", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "settings" }),
}

-- Auto Fishing: Dropdown to Select Rod
local RodDropdown = Tabs.AutoFishing:AddDropdown("Select Rod", {
    Title = "Select Rod",
    Values = {
        "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod", 
        "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod", 
        "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod", 
        "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod", 
        "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod", 
        "Kings Rod", "Aurora Rod", "Scurvy Rod"
    },
    Multi = false,
    Default = 1,
})
RodDropdown:SetValue("Flimsy Rod")

-- Auto Fishing: Equip Rod Toggle
local EquipRodToggle = Tabs.AutoFishing:AddToggle("Equip Rod", {
    Title = "Equip Rod",
    Default = false,
})
EquipRodToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    while EquipRodToggle.Value do
        local selectedRod = RodDropdown.Value
        local rodTool = backpack:FindFirstChild(selectedRod) or player.Character:FindFirstChild(selectedRod)

        if rodTool and backpack:FindFirstChild(selectedRod) then
            rodTool.Parent = player.Character
        end
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Cast Toggle
local AutoCastToggle = Tabs.AutoFishing:AddToggle("Auto Cast", {
    Title = "Auto Cast",
    Default = false,
})
AutoCastToggle:OnChanged(function()
    while AutoCastToggle.Value do
        local selectedRod = RodDropdown.Value
        local args = { [1] = 23.7, [2] = 1 }
        game:GetService("Players").LocalPlayer.Character:FindFirstChild(selectedRod).events.cast:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Reel Toggle
local AutoReelToggle = Tabs.AutoFishing:AddToggle("Auto Reel", {
    Title = "Auto Reel",
    Default = false,
})
AutoReelToggle:OnChanged(function()
    while AutoReelToggle.Value do
        local args = { [1] = 100, [2] = true }
        game:GetService("ReplicatedStorage").events.reelfinished:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Create Auto Shake Toggle
local AutoShakeToggle = Tabs.AutoFishing:AddToggle("Auto Shake", {
    Title = "Auto Shake",
    Default = false
})

AutoShakeToggle:OnChanged(function()
    local VirtualInputManager = game:GetService("VirtualInputManager")  -- Correct service for simulating input
    local pressedBackslash = false  -- Track if "\" has already been pressed
    local canPressS = true  -- Flag to track whether we can press "S"

    if AutoShakeToggle.Value then
        -- Step 1: Activate navigation mode by pressing "\"
        if not pressedBackslash then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.BackSlash, false, nil)
            pressedBackslash = true
            wait(0.3)  -- Give some time for the input to be processed
        end

        -- Step 6: Regular "S" and "Enter" simulation
        while AutoShakeToggle.Value do
            -- Press "S" only if it's allowed
            if canPressS then
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.S, false, nil)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, nil)
                canPressS = false  -- Disable further "S" presses until "Enter" is pressed
                wait(0.01)  -- Small delay to simulate pressing "S"
            end

            -- Simulate pressing "Enter"
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)
            wait(0.01)  -- Small delay to simulate pressing "Enter"

            -- After pressing "Enter", allow "S" to be pressed again
            canPressS = true
        end
    else
        -- Deactivate navigation mode by pressing "\"
        if pressedBackslash then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, nil)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.BackSlash, false, nil)
            pressedBackslash = false
        end
    end
end)

-- Create Auto Shake Debug Button
Tabs.AutoFishing:AddButton({
    Title = "Auto Shake Debug",
    Description = "Only If Needed",
    Callback = function()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        
        -- Simulate pressing Left Control (KeyCode.LeftControl)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.LeftControl, false, nil)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.LeftControl, false, nil)
    end
})

-- Auto Fishing: Fishing Area Paragraph
local FishingAreaParagraph = Tabs.AutoFishing:AddParagraph({
    Title = "Fishing Area",
    Description = "Select an area to teleport to and start fishing.",
})

-- Auto Fishing: Dropdown to Select Area
local AreaDropdown = Tabs.AutoFishing:AddDropdown("Select Area", {
    Title = "Select Area",
    Values = {
        "Ancient Isle Pond", "Ancient Isle Waterfall", "Brine Pool", "Desolate Deep", "Forsaken Shores", 
        "Forsaken Shores Pond", "Frigid Cavern", "Glacial Grotto", "Grand Reef", "Lava", "Moosewood Docks", 
        "Moosewood Pond", "Overgrowth Cave", "Roslit Bay Clam", "Roslit Pond", "Snowcap Pond", "Sunstone Island", 
        "Terrapin Olm", "The Depths", "Vertigo"
    },
    Multi = false,
    Default = 1,
})
AreaDropdown:SetValue("Ancient Isle Pond")

-- Coordinates for Fishing Areas
local fishingAreaCoordinates = {
    ["Ancient Isle Pond"] = CFrame.new(6014.65869, 179.835037, 330.316071),
    ["Ancient Isle Waterfall"] = CFrame.new(5951.72217, 216.185043, 502.174011),
    ["Brine Pool"] = CFrame.new(-1796.38306, -223.383011, -3345.58813),
    ["Desolate Deep"] = CFrame.new(-1678.24756, -306.582123, -3091.30835),
    ["Forsaken Shores"] = CFrame.new(-2654.87134, 102.072525, 1465.56531),
    ["Forsaken Shores Pond"] = CFrame.new(-2701.30591, 148.872528, 1750.0592),
    ["Frigid Cavern"] = CFrame.new(19893.125, 420.223022, 5607.42432),
    ["Glacial Grotto"] = CFrame.new(20051.2031, 854.765625, 5634.33643),
    ["Grand Reef"] = CFrame.new(-3576.57349, 11.7025375, 541.630493),
    ["Lava"] = CFrame.new(-1966.19263, 132.647018, 274.75293),
    ["Moosewood Docks"] = CFrame.new(345.802917, 54.9887085, 261.252319),
    ["Moosewood Pond"] = CFrame.new(525.744507, 137.410004, 283.821625),
    ["Overgrowth Cave"] = CFrame.new(20304.0938, 253.568161, 5525.65771),
    ["Roslit Bay Clam"] = CFrame.new(-2028.79443, 54.9887085, 541.784424),
    ["Roslit Pond"] = CFrame.new(-1761.38428, 134.953812, 596.431946),
    ["Snowcap Pond"] = CFrame.new(2789.34741, 262.703033, 2613.31104),
    ["Sunstone Island"] = CFrame.new(-1139.38635, 26.3850517, -1076.26379),
    ["Terrapin Olm"] = CFrame.new(22.0643902, 98.3850555, 1944.36792),
    ["The Depths"] = CFrame.new(745.830139, -770.311462, 1250.17554),
    ["Vertigo"] = CFrame.new(-129.634705, -808.458923, 1203.53235),
}



-- Auto Fishing: Freeze After Teleport Toggle
local FreezeAfterTeleportToggle = Tabs.AutoFishing:AddToggle("Freeze After Teleport", {
    Title = "Freeze After Teleport",
    Default = false,
})

-- Auto Fishing: Teleport to Area Button with Freeze Option
Tabs.AutoFishing:AddButton({
    Title = "Teleport To Area",
    Description = "Teleport to the selected fishing area and freeze if enabled.",
    Callback = function()
        local selectedArea = AreaDropdown.Value
        local targetCFrame = fishingAreaCoordinates[selectedArea]

        if targetCFrame then
            local player = game:GetService("Players").LocalPlayer
            local char = player.Character or player:WaitForChild("Character")
            local root = char:FindFirstChild("HumanoidRootPart")

            if root then
                root.CFrame = targetCFrame
            else
                warn("HumanoidRootPart not found!")
            end

            -- Freeze player if the toggle is on
            if FreezeAfterTeleportToggle.Value then
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = true  -- Freeze the player
                end
            end
        else
            warn("Coordinates for the selected area not found!")
        end
    end
})

-- Function to Unfreeze Player (Called when the toggle is turned off)
FreezeAfterTeleportToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local char = player.Character or player:WaitForChild("Character")
    
    if not FreezeAfterTeleportToggle.Value then
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false  -- Unfreeze the player
        end
    end
end)

-- Automatically Tab: Sell All Button
Tabs.Automatically:AddButton({
    Title = "Sell All",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").events.SellAll:InvokeServer()
    end,
})

-- Teleport Tab: Island Dropdown
local IslandDropdown = Tabs.Teleport:AddDropdown("Select Island", {
    Title = "Select Island",
    Values = {
        "Terrapin Island", "Sunstone Island", "Statue Of Sovereignty", 
        "Snowcap Island", "Mushgroove Island", "Roslit Bay", "Moosewood", 
        "Forsaken Shores", "Atlantis", "Ancient Island"
    },
    Multi = false,
    Default = 1,
})
IslandDropdown:SetValue("Terrapin Island")

-- Teleport Tab: Teleport Toggle
local TeleportToggle = Tabs.Teleport:AddToggle("Teleport To Island", {
    Title = "Teleport To Island",
    Default = false,
})

-- Island Coordinates (Updated with new islands)
local islandCoordinates = {
    ["Terrapin Island"] = Vector3.new(50.32, 297.99, 1992.42),
    ["Sunstone Island"] = Vector3.new(-1035.39, 427.59, -1144.09),
    ["Statue Of Sovereignty"] = Vector3.new(-13.02, 381.09, -1128.81),
    ["Snowcap Island"] = Vector3.new(2658.32715, 492.773834, 2550.50537),  -- Snowcap Island
    ["Roslit Bay"] = Vector3.new(-1496.55969, 384.380219, 500.728699),   -- Roslit Bay
    ["Mushgroove Island"] = Vector3.new(2662.08105, 397.321472, -728.827026), -- Mushgroove Island
    ["Moosewood"] = Vector3.new(484.861145, 294.572845, 274.825012),    -- Moosewood
    ["Forsaken Shores"] = Vector3.new(-2801.83496, 345.647247, 1533.48462), -- Forsaken Shores
    ["Atlantis"] = Vector3.new(-3572.75, 171.767273, 513.625),          -- Atlantis
    ["Ancient Island"] = Vector3.new(5943.60742, 498.524963, 507.076294), -- Ancient Island
}

TeleportToggle:OnChanged(function()
    if TeleportToggle.Value then
        local selectedIsland = IslandDropdown.Value
        local targetPos = islandCoordinates[selectedIsland]

        if targetPos then
            local player = game:GetService("Players").LocalPlayer
            local char = player.Character or player:WaitForChild("Character")
            local root = char:FindFirstChild("HumanoidRootPart")

            if root then
                root.CFrame = CFrame.new(targetPos)
            else
                warn("HumanoidRootPart not found!")
            end
        else
            warn("Coordinates for the selected island not found!")
        end
    end
end)
