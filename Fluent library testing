local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Create Main Window
local Window = Fluent:CreateWindow({
    Title = "Lite Hub | Version 1.0.0",
    SubTitle = "by Adopt",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.R,
})

--// Services
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')
local GuiService = game:GetService('GuiService')

-- Variables
local lp = Players.LocalPlayer

-- Function to find children of class
local function FindChildOfClass(parent, classname)
    return parent:FindFirstChildOfClass(classname)
end

local function FindChild(parent, child)
    return parent:FindFirstChild(child)
end

local function FindChildOfType(parent, childname, classname)
    local child = parent:FindFirstChild(childname)
    if child and child.ClassName == classname then
        return child
    end
end

-- Custom Function
local function getchar()
    return lp.Character or lp.CharacterAdded:Wait()
end

-- Tabs
local Tabs = {
    AutoFishing = Window:AddTab({ Title = "Auto Fishing", Icon = "fish-symbol" }),
    Automatically = Window:AddTab({ Title = "Automatically", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "map-pin-house" }),
}

Tabs.AutoFishing:AddParagraph({
    Title = "Rods",
    Content = ""
})

-- Auto Fishing: Dropdown to Select Rod
local RodDropdown = Tabs.AutoFishing:AddDropdown("Select Rod", {
    Title = "Select Rod",
    Values = {
        "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod", 
        "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod", 
        "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod", 
        "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod", 
        "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod", 
        "Kings Rod", "Aurora Rod", "Scurvy Rod"
    },
    Multi = false,
    Default = 1,
})
RodDropdown:SetValue("Flimsy Rod")

-- Auto Fishing: Equip Rod Toggle
local EquipRodToggle = Tabs.AutoFishing:AddToggle("Equip Rod", {
    Title = "Equip Rod",
    Default = false,
})

EquipRodToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    while EquipRodToggle.Value do
        local selectedRod = RodDropdown.Value
        local rodTool = backpack:FindFirstChild(selectedRod) or player.Character:FindFirstChild(selectedRod)

        if rodTool and backpack:FindFirstChild(selectedRod) then
            rodTool.Parent = player.Character
        end
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Cast Toggle
local AutoCastToggle = Tabs.AutoFishing:AddToggle("Auto Cast", {
    Title = "Auto Cast",
    Default = false,
})

AutoCastToggle:OnChanged(function()
    while AutoCastToggle.Value do
        local selectedRod = RodDropdown.Value
        local args = { [1] = 23.7, [2] = 1 }
        game:GetService("Players").LocalPlayer.Character:FindFirstChild(selectedRod).events.cast:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Reel Toggle
local AutoReelToggle = Tabs.AutoFishing:AddToggle("Auto Reel", {
    Title = "Auto Reel",
    Default = false,
})

AutoReelToggle:OnChanged(function()
    while AutoReelToggle.Value do
        local args = { [1] = 100, [2] = true }
        game:GetService("ReplicatedStorage").events.reelfinished:FireServer(unpack(args))
        wait(0.5)
    end
end)

-- Auto Shake Toggle
local AutoShakeToggle = Tabs.AutoFishing:AddToggle("Auto Shake", {
    Title = "Auto Shake",
    Default = false
})

local isShaking = false

-- Function to shake the button (select and simulate key press)
local function shakeButton()
    local shakeUI = FindChild(lp.PlayerGui, 'shakeui')
    if not shakeUI then return end
    local safezone = FindChild(shakeUI, 'safezone')
    if not safezone then return end
    local button = FindChild(safezone, 'button')
    if not button then return end

    if GuiService.SelectedObject ~= button then
        GuiService.SelectedObject = button
    end

    game:GetService('VirtualInputManager'):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
    game:GetService('VirtualInputManager'):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
end

AutoShakeToggle:OnChanged(function(State)
    if State then
        isShaking = true
        while isShaking do
            shakeButton()
            wait(0.001)
        end
    else
        isShaking = false
    end
end)

-- Automatically Tab: Sell All Button
Tabs.Automatically:AddButton({
    Title = "Sell All",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").events.SellAll:InvokeServer()
    end,
})

-- Define the coordinates of each island
local islandCoordinates = {
    ['Moosewood'] = CFrame.new(379.875458, 134.500519, 233.5495, -0.033920113, 8.13274355e-08, 0.999424577, 8.98441925e-08, 1, -7.83249803e-08, -0.999424577, 8.7135696e-08, -0.033920113),
    ['Roslit Bay'] = CFrame.new(-1472.9812, 132.525513, 707.644531, -0.00177415239, 1.15743369e-07, -0.99999845, -9.25943056e-09, 1, 1.15759981e-07, 0.99999845, 9.46479251e-09, -0.00177415239),
    ['Forsaken Shores'] = CFrame.new(-2491.104, 133.250015, 1561.2926, 0.355353981, -1.68352852e-08, -0.934731781, 4.69647858e-08, 1, -1.56367586e-10, 0.934731781, -4.38439116e-08, 0.355353981),
    ['Sunstone Island'] = CFrame.new(-913.809143, 138.160782, -1133.25879, -0.746701241, 4.50330218e-09, 0.665159583, 2.84934609e-09, 1, -3.5716119e-09, -0.665159583, -7.71657294e-10, -0.746701241),
    ['Statue of Sovereignty'] = CFrame.new(21.4017925, 159.014709, -1039.14233, -0.865476549, -4.38348664e-08, -0.500949502, -9.38435818e-08, 1, 7.46273798e-08, 0.500949502, 1.11599142e-07, -0.865476549),
    ['Terrapin Island'] = CFrame.new(-193.434143, 135.121979, 1951.46936, 0.512723684, -6.94711346e-08, 0.858553708, 5.44089183e-08, 1, 4.84237539e-08, -0.858553708, 2.18849721e-08, 0.512723684),
    ['Snowcap Island'] = CFrame.new(2607.93018, 135.284332, 2436.13208, 0.909039497, -7.49003748e-10, 0.4167099, 3.38659367e-09, 1, -5.59032465e-09, -0.4167099, 6.49305321e-09, 0.909039497),
    ['Mushgrove Swamp'] = CFrame.new(2434.29785, 131.983276, -691.930542, -0.123090521, -7.92820209e-09, -0.992395461, -9.05862692e-08, 1, 3.2467995e-09, 0.992395461, 9.02970569e-08, -0.123090521),
    ['Ancient Isle'] = CFrame.new(6056.02783, 195.280167, 276.270325, -0.655055285, 1.96010075e-09, 0.755580962, -1.63855578e-08, 1, -1.67997189e-08, -0.755580962, -2.33853594e-08, -0.655055285),
    ['Northern Expedition'] = CFrame.new(-1701.02979, 187.638779, 3944.81494, 0.918493569, -8.5804345e-08, 0.395435959, 8.59132356e-08, 1, 1.74328942e-08, -0.395435959, 1.7961181e-08, 0.918493569),
    ['Northern Summit'] = CFrame.new(19608.791, 131.420105, 5222.15283, 0.462794542, -2.64426987e-08, 0.886465549, -4.47066562e-08, 1, 5.31692343e-08, -0.886465549, -6.42373408e-08, 0.462794542),
    ['Vertigo'] = CFrame.new(-102.40567, -513.299377, 1052.07104, -0.999989033, 5.36423439e-09, 0.00468267547, 5.85247495e-09, 1, 1.04251647e-07, -0.00468267547, 1.04277916e-07, -0.999989033),
    ['Depths Entrance'] = CFrame.new(-15.4965982, -706.123718, 1231.43494, 0.0681341439, 1.15903154e-08, -0.997676194, 7.1017638e-08, 1, 1.64673093e-08, 0.997676194, -7.19745898e-08, 0.0681341439),
    ['Depths'] = CFrame.new(491.758118, -706.123718, 1230.6377, 0.00879980437, 1.29271776e-08, -0.999961257, 1.95575205e-13, 1, 1.29276803e-08, 0.999961257, -1.13956629e-10, 0.00879980437),
    ['Overgrowth Caves'] = CFrame.new(19746.2676, 416.00293, 5403.5752, 0.488031536, -3.30940715e-08, -0.87282598, -3.24267696e-11, 1, -3.79341323e-08, 0.87282598, 1.85413569e-08, 0.488031536),
    ['Frigid Cavern'] = CFrame.new(20253.6094, 756.525818, 5772.68555, -0.781508088, 1.85673343e-08, 0.623895109, 5.92671467e-09, 1, -2.23363816e-08, -0.623895109, -1.3758414e-08, -0.781508088),
    ['Cryogenic Canal'] = CFrame.new(19958.5176, 917.195923, 5332.59375, 0.758922458, -7.29783434e-09, 0.651180983, -4.58880756e-09, 1, 1.65551253e-08, -0.651180983, -1.55522013e-08, 0.758922458),
    ['Glacial Grotto'] = CFrame.new(20003.0273, 1136.42798, 5555.95996, 0.983130038, -3.94455064e-08, 0.182907909, 3.45229765e-08, 1, 3.0096718e-08, -0.182907909, -2.32744615e-08, 0.983130038),
    ["Keeper's Altar"] = CFrame.new(1297.92285, -805.292236, -284.155823, -0.99758029, 5.80044706e-08, -0.0695239156, 6.16549869e-08, 1, -5.03615105e-08, 0.0695239156, -5.45261436e-08, -0.99758029)
}

-- Teleport Tab: Create Dropdown for Island Selection
local islandList = {}
for islandName, _ in pairs(islandCoordinates) do
    table.insert(islandList, islandName)
end

local selectedIsland = islandList[1]  -- Default selected island

Tabs.Teleport:AddParagraph({
    Title = "Islands",
    Content = ""
})

Tabs.Teleport:AddDropdown({
    Title = "Select Island",
    Options = islandList,
    Default = selectedIsland,
    Callback = function(value)
        selectedIsland = value
    end
})

-- Teleport Button
Tabs.Teleport:AddButton({
    Title = "Teleport To Island",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if character and character:FindFirstChild("HumanoidRootPart") then
            local targetCFrame = islandCoordinates[selectedIsland]
            if targetCFrame then
                character:SetPrimaryPartCFrame(targetCFrame)
            else
                warn("Island not found: " .. tostring(selectedIsland))
            end
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

-- Define the coordinates of each fishing spot
local FishAreas = {
    Roslit_Bay = CFrame.new(-1663.73889, 149.234116, 495.498016, 0.0380855016, 4.08820178e-08, -0.999274492, 5.74658472e-08, 1, 4.3101906e-08, 0.999274492, -5.90657123e-08, 0.0380855016),
    Ocean = CFrame.new(7665.104, 125.444443, 2601.59351, 0.999966085, -0.000609769544, -0.00821684115, 0.000612694537, 0.999999762, 0.000353460142, 0.00821662322, -0.000358482561, 0.999966204),
    Snowcap_Pond = CFrame.new(2778.09009, 283.283783, 2580.323, 1, 7.17688531e-09, -2.22843701e-05, -7.17796267e-09, 1, -4.83369114e-08, 2.22843701e-05, 4.83370712e-08, 1),
    Moosewood_Docks = CFrame.new(343.2359924316406, 133.61595153808594, 267.0580139160156),
    Deep_Ocean = CFrame.new(3569.07153, 125.480949, 6697.12695, 0.999980748, -0.00188910461, -0.00591362361, 0.00193980196, 0.999961317, 0.00857902411, 0.00589718809, -0.00859032944, 0.9999457),
    Vertigo = CFrame.new(-137.697098, -736.86377, 1233.15271, 1, -1.61821543e-08, -2.01375751e-05, 1.6184277e-08, 1, 1.05423091e-07, 2.01375751e-05, -1.0542341e-07, 1),
    Snowcap_Ocean = CFrame.new(3088.66699, 131.534332, 2587.11304, 1, 4.30694858e-09, -1.19097813e-14, -4.30694858e-09, 1, -2.80603398e-08, 1.17889275e-14, 2.80603398e-08, 1),
    Harvesters_Spike = CFrame.new(-1234.61523, 125.228767, 1748.57166, 0.999991536, -0.000663080777, -0.00405627443, 0.000725277001, 0.999881923, 0.0153511297, 0.00404561637, -0.0153539423, 0.999873936),
    SunStone = CFrame.new(-845.903992, 133.172211, -1163.57776, 1, -7.93465915e-09, -2.09446498e-05, 7.93544608e-09, 1, 3.75741536e-08, 2.09446498e-05, -3.75743205e-08, 1),
    Roslit_Bay_Ocean = CFrame.new(-1708.09302, 155.000015, 384.928009, 1, -9.84460868e-09, -3.24939563e-15, 9.84460868e-09, 1, 4.66220271e-08, 2.79042003e-15, -4.66220271e-08, 1),
    Moosewood_Pond = CFrame.new(509.735992, 152.000031, 302.173004, 1, -1.78487678e-08, -8.1329488e-14, 1.78487678e-08, 1, 8.45405168e-08, 7.98205428e-14, -8.45405168e-08, 1),
    Terrapin_Ocean = CFrame.new(58.6469994, 135.499985, 2147.41699, 1, 2.09643041e-08, -5.6023784e-15, -2.09643041e-08, 1, -9.92988376e-08, 3.52064755e-15, 9.92988376e-08, 1),
    Isonade = CFrame.new(-1060.99902, 121.164787, 953.996033, 0.999958456, 0.000633197487, -0.00909138657, -0.000568434712, 0.999974489, 0.00712434994, 0.00909566507, -0.00711888634, 0.999933302),
    Moosewood_Ocean = CFrame.new(-167.642715, 125.19548, 248.009521, 0.999997199, -0.000432743778, -0.0023210498, 0.000467110571, 0.99988997, 0.0148265222, 0.00231437827, -0.0148275653, 0.999887407),
    Roslit_Pond = CFrame.new(-1811.96997, 148.047089, 592.642517, 1, 1.12983072e-08, -2.16573972e-05, -1.12998171e-08, 1, -6.97014357e-08, 2.16573972e-05, 6.97016844e-08, 1),
    Moosewood_Ocean_Mythical = CFrame.new(252.802994, 135.849625, 36.8839989, 1, -1.98115071e-08, -4.50667564e-15, 1.98115071e-08, 1, 1.22230617e-07, 2.08510289e-15, -1.22230617e-07, 1),
    Terrapin_Olm = CFrame.new(22.0639992, 182.000015, 1944.36804, 1, 1.14953362e-08, -2.7011112e-15, -1.14953362e-08, 1, -7.09263972e-08, 1.88578841e-15, 7.09263972e-08, 1),
    The_Arch = CFrame.new(1283.30896, 130.923569, -1165.29602, 1, -5.89772364e-09, -3.3183043e-15, 5.89772364e-09, 1, 3.63913486e-08, 3.10367822e-15, -3.63913486e-08, 1),
    Scallop_Ocean = CFrame.new(23.2255898, 125.236847, 738.952271, 0.999990165, -0.00109633175, -0.00429760758, 0.00115595153, 0.999902785, 0.0138949333, 0.00428195624, -0.013899764, 0.999894202),
    SunStone_Hidden = CFrame.new(-1139.55701, 134.62204, -1076.94324, 1, 3.9719481e-09, -1.6278158e-05, -3.97231048e-09, 1, -2.22651142e-08, 1.6278158e-05, 2.22651781e-08, 1),
    Mushgrove_Stone = CFrame.new(2525.36011, 131.000015, -776.184021, 1, 1.90145943e-08, -3.24206519e-15, -1.90145943e-08, 1, -1.06596836e-07, 1.21516956e-15, 1.06596836e-07, 1),
    Keepers_Altar = CFrame.new(1307.13599, -805.292236, -161.363998, 1, 2.40881981e-10, -3.25609947e-15, -2.40881981e-10, 1, -1.35044154e-09, 3.255774e-15, 1.35044154e-09, 1),
    Lava = CFrame.new(-1959.86206, 193.144821, 271.960999, 1, -6.02453598e-09, -2.97388313e-15, 6.02453598e-09, 1, 3.37767716e-08, 2.77039384e-15, -3.37767716e-08, 1),
    Roslit_Pond_Seaweed = CFrame.new(-1785.2869873046875, 148.15780639648438, 639.9299926757812),    
}

-- Teleport Tab: Create Dropdown for Fishing Spot Selection
local fishingSpotList = {}
for spotName, _ in pairs(FishAreas) do
    table.insert(fishingSpotList, spotName)
end

local selectedFishingSpot = fishingSpotList[1]  -- Default selected fishing spot

Tabs.Teleport:AddParagraph({
    Title = "Fishing Spot",
    Content = ""
})

Tabs.Teleport:AddDropdown({
    Title = "Select Fishing Spot",
    Options = fishingSpotList,
    Default = selectedFishingSpot,
    Callback = function(value)
        selectedFishingSpot = value
    end
})

-- Teleport Button for Fishing Spots
Tabs.Teleport:AddButton({
    Title = "Teleport To Fishing Spot",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if character and character:FindFirstChild("HumanoidRootPart") then
            local targetCFrame = FishAreas[selectedFishingSpot]
            if targetCFrame then
                character:SetPrimaryPartCFrame(targetCFrame)
            else
                warn("Fishing spot not found: " .. tostring(selectedFishingSpot))
            end
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

-- NPC List
local npcLocations = {
    Witch = CFrame.new(409.638092, 134.451523, 311.403687),
    Quiet_Synph = CFrame.new(566.263245, 152.000031, 353.872101),
    Pierre = CFrame.new(391.38855, 135.348389, 196.712387),
    Phineas = CFrame.new(469.912292, 150.69342, 277.954987),
    Paul = CFrame.new(381.741882, 136.500031, 341.891022),
    Shipwright = CFrame.new(357.972595, 133.615967, 258.154541),
    Angler = CFrame.new(480.102478, 150.501053, 302.226898),
    Marc = CFrame.new(466.160034, 151.00206, 224.497086),
    Lucas = CFrame.new(449.33963, 181.999893, 180.689072),
    Latern_Keeper = CFrame.new(-39.0456772, -246.599976, 195.644363),
    Latern_Keeper2 = CFrame.new(-17.4230175, -304.970276, -14.529892),
    Inn_Keeper = CFrame.new(487.458466, 150.800034, 231.498932),
    Roslit_Keeper = CFrame.new(-1512.37891, 134.500031, 631.24353),
    FishingNpc_1 = CFrame.new(-1429.04138, 134.371552, 686.034424),
    FishingNpc_2 = CFrame.new(-1778.55408, 149.791779, 648.097107),
    FishingNpc_3 = CFrame.new(-1778.26807, 147.83165, 653.258606),
    Henry = CFrame.new(483.539307, 152.383057, 236.296143),
    Daisy = CFrame.new(581.550049, 165.490753, 213.499969),
    Appraiser = CFrame.new(453.182373, 150.500031, 206.908783),
    Merchant = CFrame.new(416.690521, 130.302628, 342.765289),
    Mod_Keeper = CFrame.new(-39.0905838, -245.141144, 195.837891),
    Ashe = CFrame.new(-1709.94055, 149.862411, 729.399536),
    Alfredrickus = CFrame.new(-1520.60632, 142.923264, 764.522034),
}

-- Extract NPC names for dropdown options
local npcNames = {}
for name, _ in pairs(npcLocations) do
    table.insert(npcNames, name)
end

local selectedNpc = npcNames[1] -- Default selection

Tabs.Teleport:AddParagraph({
    Title = "Npc",
    Content = ""
})

-- Create Dropdown for NPCs
Tabs.Teleport:AddDropdown({
    Title = "Select NPC",
    Options = npcNames,
    Default = selectedNpc,
    Callback = function(value)
        selectedNpc = value
    end
})

-- Create Button for Teleportation
Tabs.Teleport:AddButton({
    Title = "Teleport To NPC",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if character and character:FindFirstChild("HumanoidRootPart") then
            local targetCFrame = npcLocations[selectedNpc]
            if targetCFrame then
                character:SetPrimaryPartCFrame(targetCFrame)
            else
                warn("NPC location not found: " .. tostring(selectedNpc))
            end
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})
