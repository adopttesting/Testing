local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Lite Hub",
    SubTitle = "Made By Adopt",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Aqua", -- Set the theme to Aqua
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Client = Window:AddTab({ Title = "Client", Icon = "" }),
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFishing = Window:AddTab({ Title = "Auto Fishing", Icon = "" }) -- Fixed the naming issue (from "Auto Fiching" to "Auto Fishing")
}

local Options = Fluent.Options

local startTime = tick()

Tabs.Client:AddParagraph({
    Title = "Elapsed Time",
    Content = "minute:0 hour:0 day:0 week:0"
})

local elapsedSeconds = 0
local elapsedMinutes = 0
local elapsedHours = 0
local elapsedDays = 0
local elapsedWeeks = 0

task.spawn(function()
    while true do
        wait(1)  -- Wait 1 second
        elapsedSeconds = elapsedSeconds + 1  -- Increment by 1 second

        -- Calculate minutes, hours, days, and weeks
        if elapsedSeconds >= 60 then
            elapsedSeconds = 0
            elapsedMinutes = elapsedMinutes + 1
        end

        if elapsedMinutes >= 60 then
            elapsedMinutes = 0
            elapsedHours = elapsedHours + 1
        end

        if elapsedHours >= 24 then
            elapsedHours = 0
            elapsedDays = elapsedDays + 1
        end

        if elapsedDays >= 7 then
            elapsedDays = 0
            elapsedWeeks = elapsedWeeks + 1
        end
        
        -- Update the displayed time
        Tabs.Client:GetParagraph(1).Content = string.format("minute:%d hour:%d day:%d week:%d", 
                                                            elapsedMinutes, elapsedHours, elapsedDays, elapsedWeeks)
    end
end)

Tabs.Main:AddParagraph({
    Title = "Local Player",
    Content = ""
})

local WalkSpeedSlider = Tabs.Main:AddSlider("WalkSpeedSlider", {
    Title = "WalkSpeed",
    Description = "Adjust your walk speed",
    Default = 16,
    Min = 16,
    Max = 1000,
    Rounding = 1,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end
})

WalkSpeedSlider:SetValue(16) -- Set initial WalkSpeed value to 16

local JumpPowerSlider = Tabs.Main:AddSlider("JumpPowerSlider", {
    Title = "JumpPower",
    Description = "Adjust your jump power",
    Default = game.Players.LocalPlayer.Character.Humanoid.JumpPower, -- Default to current JumpPower
    Min = game.Players.LocalPlayer.Character.Humanoid.JumpPower, -- Minimum set to current JumpPower
    Max = 1000,
    Rounding = 1,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    end
})

JumpPowerSlider:SetValue(game.Players.LocalPlayer.Character.Humanoid.JumpPower) -- Set initial JumpPower value to current JumpPower

local Toggle = Tabs.Main:AddToggle("Infinite Jump", {Title = "Infinite Jump", Default = false})

-- Variable to check if infinite jump is enabled
local infiniteJumpEnabled = false

Toggle:OnChanged(function()
    infiniteJumpEnabled = Toggle.Value
end)

-- Function to handle infinite jump
game:GetService("UserInputService").JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        -- Allow the player to jump again immediately by setting Humanoid's JumpPower
        local player = game.Players.LocalPlayer
        if player and player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                humanoid:Move(Vector3.new(0, 50, 0))  -- Apply a force upwards to simulate the jump
            end
        end
    end
end)

Tabs.AutoFishing:AddParagraph({
    Title = "Farming",
    Content = ""
})

-- Create Dropdown for Select Rod
local Dropdown = Tabs.AutoFishing:AddDropdown("Select Rod", {
    Title = "",
    Values = {
        "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod", 
        "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod", 
        "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod", 
        "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod", 
        "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod", 
        "Kings Rod", "Aurora Rod", "Scurvy Rod"
    },
    Multi = false,
    Default = 1,
})

Dropdown:SetValue("Flimsy Rod")  -- Default selection set to "Flimsy Rod"

-- Create Equip Rod Toggle
local EquipRodToggle = Tabs.AutoFishing:AddToggle("Equip Rod", {
    Title = "Equip Rod",
    Default = false
})

EquipRodToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    while EquipRodToggle.Value do
        local selectedRod = Dropdown.Value  -- Get the rod name from the dropdown
        local rodTool = backpack:FindFirstChild(selectedRod) or player.Character:FindFirstChild(selectedRod)

        if rodTool and backpack:FindFirstChild(selectedRod) then
            rodTool.Parent = player.Character  -- Equip the rod
        end

        wait(0.5)  -- Adjust as needed to control how often it checks
    end
end)

-- Create Auto Cast Toggle
local AutoCastToggle = Tabs.AutoFishing:AddToggle("Auto Cast", {
    Title = "Auto Cast",
    Default = false
})

AutoCastToggle:OnChanged(function()
    while AutoCastToggle.Value do
        -- Fire the cast event with the selected rod
        local selectedRod = Dropdown.Value
        local args = {
            [1] = 23.7,  -- example value, replace as needed
            [2] = 1,
        }
        
        game:GetService("Players").LocalPlayer.Character:FindFirstChild(selectedRod).events.cast:FireServer(unpack(args))
        
        wait(0.5)  -- Adjust the wait time as needed
    end
end)

-- Create Auto Reel Toggle
local AutoReelToggle = Tabs.AutoFishing:AddToggle("Auto Reel", {
    Title = "Auto Reel",
    Default = false
})

AutoReelToggle:OnChanged(function()
    while AutoReelToggle.Value do
        -- Fire the reel finished event
        local args = {
            [1] = 100,
            [2] = true,
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished"):FireServer(unpack(args))
        
        wait(0.5)  -- Adjust the wait time as needed
    end
end)

-- Create Auto Shake Toggle
local AutoShakeToggle = Tabs.AutoFishing:AddToggle("Auto Shake", {
    Title = "Auto Shake",
    Default = false
})

AutoShakeToggle:OnChanged(function()
    local UserInputService = game:GetService("UserInputService")
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    local pressedBackslash = false  -- Track if "\" has already been pressed

    if AutoShakeToggle.Value then
        -- Activate navigation mode (press "\" once)
        if not pressedBackslash then
            UserInputService.InputBegan:Fire(Instance.new("InputObject", {
                UserInputType = Enum.UserInputType.Keyboard,
                KeyCode = Enum.KeyCode.BackSlash  -- KeyCode for "\"
            }))
            pressedBackslash = true  -- Mark "\" as pressed
            wait(0.1)  -- Small delay to ensure input is registered
        end

        -- Start continuous loop for "S" and "Enter"
        while AutoShakeToggle.Value do
            -- Simulate pressing "S" (for going down)
            UserInputService.InputBegan:Fire(Instance.new("InputObject", {
                UserInputType = Enum.UserInputType.Keyboard,
                KeyCode = Enum.KeyCode.S
            }))
            wait(0.1)  -- Small delay to ensure input is registered

            -- Simulate pressing "Enter" to confirm navigation
            UserInputService.InputBegan:Fire(Instance.new("InputObject", {
                UserInputType = Enum.UserInputType.Keyboard,
                KeyCode = Enum.KeyCode.Return
            }))
            wait(0.15)  -- Adjust delay as needed for continuous action
        end
    else
        -- Deactivate navigation mode (press "\" again)
        UserInputService.InputBegan:Fire(Instance.new("InputObject", {
            UserInputType = Enum.UserInputType.Keyboard,
            KeyCode = Enum.KeyCode.BackSlash  -- KeyCode for "\"
        }))
        pressedBackslash = false  -- Reset when navigation mode is deactivated
    end
end)

-- Create Free Local Player Toggle
local FreezePlayerToggle = Tabs.AutoFishing:AddToggle("Freeze Local Player", {
    Title = "",
    Default = false
})

FreezePlayerToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        while FreezePlayerToggle.Value do
            -- Freeze the player's movement
            humanoid.PlatformStand = true
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            wait(0.1)  -- Check every 0.1 seconds to see if the toggle is still on
        end
        -- Unfreeze the player when the toggle is turned off
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end)

