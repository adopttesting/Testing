local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Create Main Window
local Window = Fluent:CreateWindow({
    Title = "Lite Hub | Version 1.0.0",
    SubTitle = "by Adopt",
    TabWidth = 160,
    Size = UDim2.fromOffset(540, 480),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
})

game.Players.LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
    end)

--// Services
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')
local GuiService = game:GetService('GuiService')

-- Variables
local lp = Players.LocalPlayer

-- Function to find children of class
local function FindChildOfClass(parent, classname)
    return parent:FindFirstChildOfClass(classname)
end

local function FindChild(parent, child)
    return parent:FindFirstChild(child)
end

local function FindChildOfType(parent, childname, classname)
    local child = parent:FindFirstChild(childname)
    if child and child.ClassName == classname then
        return child
    end
end

-- Custom Function
local function getchar()
    return lp.Character or lp.CharacterAdded:Wait()
end

--Walk On water Funcction
for i,v in pairs(workspace.zones.fishing:GetChildren()) do
			if v.Name == "Ocean" then
				v.CanCollide = Value
			end
		end
-- Tabs
local Tabs = {
    AutoFishing = Window:AddTab({ Title = "Auto Fishing", Icon = "" }),
    Automatically = Window:AddTab({ Title = "Automatically", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
}

Tabs.AutoFishing:AddParagraph({
    Title = "Rods",
    Content = ""
})

-- Auto Fishing: Dropdown to Select Rod
local RodDropdown = Tabs.AutoFishing:AddDropdown("Select Rod", {
    Title = "Select Rod",
    Values = {
        "Flimsy Rod", "Precision Rod", "Plastic Rod", "Carbon Rod", "Long Rod", 
        "Executive Rod", "No-Life Rod", "Rod Of The Depths", "Training Rod", 
        "Fast Rod", "Lucky Rod", "Steady Rod", "Fortune Rod", "Magma Rod", 
        "Reinforced Rod", "Stone Rod", "Phoenix Rod", "Midas Rod", "Trident Rod", 
        "Mythical Rod", "Rapid Rod", "Magnet Rod", "Nocturnal Rod", "Destiny Rod", 
        "Kings Rod", "Aurora Rod", "Scurvy Rod"
    },
    Multi = false,
    Default = 1,
})
RodDropdown:SetValue("Flimsy Rod")

-- Auto Fishing: Equip Rod Toggle
local EquipRodToggle = Tabs.AutoFishing:AddToggle("Equip Rod", {
    Title = "Equip Rod",
    Default = false,
})

EquipRodToggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    while EquipRodToggle.Value do
        local selectedRod = RodDropdown.Value
        local rodTool = backpack:FindFirstChild(selectedRod) or player.Character:FindFirstChild(selectedRod)

        if rodTool and backpack:FindFirstChild(selectedRod) then
            rodTool.Parent = player.Character
        end
        wait(0.5)
    end
end)

-- Auto Fishing: Auto Cast Toggle
local AutoCastToggle = Tabs.AutoFishing:AddToggle("Auto Cast", {
    Title = "Auto Cast",
    Default = false,
})

AutoCastToggle:OnChanged(function()
    while AutoCastToggle.Value do
        local selectedRod = RodDropdown.Value
        local args = { [1] = 23.7, [2] = 1 }
        game:GetService("Players").LocalPlayer.Character:FindFirstChild(selectedRod).events.cast:FireServer(unpack(args))
        wait(0.1)
    end
end)

-- Auto Fishing: Auto Reel Toggle
local AutoReelToggle = Tabs.AutoFishing:AddToggle("Auto Reel", {
    Title = "Auto Reel",
    Default = false,
})

AutoReelToggle:OnChanged(function()
    while AutoReelToggle.Value do
        local args = { [1] = 100, [2] = true }
        game:GetService("ReplicatedStorage").events.reelfinished:FireServer(unpack(args))
        wait(0.1)
    end
end)

-- Auto Shake Toggle
local AutoShakeToggle = Tabs.AutoFishing:AddToggle("Auto Shake", {
    Title = "Auto Shake",
    Default = false
})

local isShaking = false

-- Function to shake the button (select and simulate key press)
local function shakeButton()
    local shakeUI = FindChild(lp.PlayerGui, 'shakeui')
    if not shakeUI then return end
    local safezone = FindChild(shakeUI, 'safezone')
    if not safezone then return end
    local button = FindChild(safezone, 'button')
    if not button then return end

    if GuiService.SelectedObject ~= button then
        GuiService.SelectedObject = button
    end

    game:GetService('VirtualInputManager'):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
    game:GetService('VirtualInputManager'):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
end

AutoShakeToggle:OnChanged(function(State)
    if State then
        isShaking = true
        while isShaking do
            shakeButton()
            wait(0.001)
        end
    else
        isShaking = false
    end
end)

Tabs.Automatically:AddParagraph({
    Title = "Selling",
    Content = ""
})

-- Automatically Tab: Sell All Button
Tabs.Automatically:AddButton({
    Title = "Sell All",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").events.SellAll:InvokeServer()
    end,
})

Tabs.Automatically:AddButton({
    Title = "Sell In Hand",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("Sell")
    end,
})

Tabs.Automatically:AddParagraph({
    Title = "Auto Buy",
    Content = ""
})

Tabs.Automatically:AddButton({
    Title = "Auto Buy Relics",
    Description = "",
    Callback = function()
        local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Store the player's current position
local previousPosition = character.HumanoidRootPart.Position

-- Teleport to the specified coordinates
local targetPosition = Vector3.new(-931.5254516601562, 223.78355407714844, -986.8485717773438)
character:SetPrimaryPartCFrame(CFrame.new(targetPosition))

-- Fire the server function
local merlin = workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Merlin"):WaitForChild("Merlin"):WaitForChild("power")
merlin:InvokeServer()

-- Wait for a brief moment before returning to the previous position
wait(0)  -- Adjust the wait time if needed

-- Return to the previous position
character:SetPrimaryPartCFrame(CFrame.new(previousPosition))
    end,
})

Tabs.Misc:AddParagraph({
    Title = "Server Hoping",
    Content = ""
})

Tabs.Misc:AddButton({
    Title = "Server Hop",
    Description = "",
    Callback = function()
        AllFuncs.HopServer(true)
    end,
})

Tabs.Misc:AddButton({
    Title = "Rejoin Server",
    Description = "",
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.placeId, game.jobId, game.Players.LocalPlayer);
    end,
})

Tabs.Misc:AddParagraph({
    Title = "Lag",
    Content = ""
})

Tabs.Misc:AddButton({
    Title = "Boost Fps",
    Description = "",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
                if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") then
                    if v.Transparency ~= 1 then
                        v.Material = Enum.Material.SmoothPlastic
                    end
                elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                    v:Destroy()
                end
            end
    end,
})

Tabs.Misc:AddButton({
    Title = "Fps Big Boost",
    Description = "",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                    v:Destroy()
                end
            end
    end,
})

Tabs.Misc:AddButton({
    Title = "Remove Fog",
    Description = "",
    Callback = function()
        game:GetService("Lighting"):FindFirstChild("Sky") then
				game:GetService("Lighting"):FindFirstChild("Sky").Parent = game:GetService("Lighting").bloom
			end
		else
			if game:GetService("Lighting").bloom:FindFirstChild("Sky") then
				game:GetService("Lighting").bloom:FindFirstChild("Sky").Parent = game:GetService("Lighting")
			end
		end
    end,
})



--Minimize Gui Button
local UIS = game:GetService("UserInputService")
local frame = script.Parent -- Ensure this points to the correct frame
local dragToggle = false
local dragStart = nil
local startPos = nil

-- Adjust the size of the frame (GUI) to 50x50
frame.Size = UDim2.new(0, 50, 0, 50)

-- Add a UICorner to the frame
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 5) -- Set corner radius to (0, 5)
uiCorner.Parent = frame

-- Add an image to the frame
local image = Instance.new("ImageLabel")
image.Image = "rbxassetid://86093303748141" -- Set the image
image.Size = UDim2.new(1, 0, 1, 0) -- Match the size of the frame
image.BackgroundTransparency = 1 -- Make the background transparent
image.Parent = frame

local function updateInput(input)
	if dragToggle then
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(
			startPos.X.Scale,
			startPos.X.Offset + delta.X,
			startPos.Y.Scale,
			startPos.Y.Offset + delta.Y
		)
	end
end

frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragToggle = true
		dragStart = input.Position
		startPos = frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragToggle = false
			end
		end)
	end
end)

UIS.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		if dragToggle then
			frame.Transparency = 1
			updateInput(input)
		else
			frame.Transparency = 1
		end
	end
end)
