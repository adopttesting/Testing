local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Lite Hub",
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Aqua", -- Set the theme to Aqua
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Client = Window:AddTab({ Title = "Client", Icon = "" }),
    "Auto Farming" = Window:AddTab({ Title = "Auto Farming", Icon = "" }),
    Killing = Window:AddTab({ Title = "Killing", Icon = "skull" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Time Elapsing
local startTime = tick()

Tabs.Client:AddParagraph({
    Title = "Execution Time",
    Content = "minute:0 hour:0 day:0 week:0"
})

task.spawn(function()
    while true do
        wait(1)
        local elapsedTime = tick() - startTime
        local minutes = math.floor(elapsedTime / 60)
        local hours = math.floor(minutes / 60)
        local days = math.floor(hours / 24)
        local weeks = math.floor(days / 7)
        
        Tabs.Client:GetParagraph(1).Content = string.format("minute:%d hour:%d day:%d week:%d", minutes % 60, hours % 24, days % 7, weeks)
    end
end)

-- Auto Farming
local autoWeightToggle = Tabs["Auto Farming"]:AddToggle("AutoWeight", {Title = "Auto Weight", Default = false})
autoWeightToggle:OnChanged(function(Value)
    if Value then
        while autoWeightToggle.Value do
            -- Equip and use Weight tool (replace 'Weight' with actual tool name)
            local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
            if weightTool then
                weightTool.Parent = game.Players.LocalPlayer.Character
                weightTool:Activate()
            end
            wait(0.5)
        end
    end
end)

local autoPushupsToggle = Tabs["Auto Farming"]:AddToggle("AutoPushups", {Title = "Auto Pushups", Default = false})
autoPushupsToggle:OnChanged(function(Value)
    if Value then
        while autoPushupsToggle.Value do
            -- Equip and use Pushups tool (replace 'Pushups' with actual tool name)
            local pushupsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
            if pushupsTool then
                pushupsTool.Parent = game.Players.LocalPlayer.Character
                pushupsTool:Activate()
            end
            wait(0.5)
        end
    end
end)

local autoSitupsToggle = Tabs["Auto Farming"]:AddToggle("AutoSitups", {Title = "Auto Situps", Default = false})
autoSitupsToggle:OnChanged(function(Value)
    if Value then
        while autoSitupsToggle.Value do
            -- Equip and use Situps tool (replace 'Situps' with actual tool name)
            local situpsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
            if situpsTool then
                situpsTool.Parent = game.Players.LocalPlayer.Character
                situpsTool:Activate()
            end
            wait(0.5)
        end
    end
end)

local autoHandstandsToggle = Tabs["Auto Farming"]:AddToggle("AutoHandstands", {Title = "Auto Handstands", Default = false})
autoHandstandsToggle:OnChanged(function(Value)
    if Value then
        while autoHandstandsToggle.Value do
            -- Equip and use Handstands tool (replace 'Handstands' with actual tool name)
            local handstandsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstands")
            if handstandsTool then
                handstandsTool.Parent = game.Players.LocalPlayer.Character
                handstandsTool:Activate()
            end
            wait(0.5)
        end
    end
end)

-- Killing
local autoKillToggle = Tabs.Killing:AddToggle("AutoKill", {Title = "Auto Kill", Default = false})
autoKillToggle:OnChanged(function(Value)
    if Value then
        while autoKillToggle.Value do
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    -- Teleport to my right hand and equip Punch tool
                    local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                    local rightHand = game.Players.LocalPlayer.Character:FindFirstChild("RightHand")
                    if humanoidRootPart and rightHand then
                        humanoidRootPart.CFrame = rightHand.CFrame
                    end
                    
                    -- Equip and use Punch tool (replace 'Punch' with actual tool name)
                    local punchTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Punch")
                    if punchTool then
                        punchTool.Parent = game.Players.LocalPlayer.Character
                        punchTool:Activate()
                    end
                end
            end
            wait(1)
        end
    end
end)

-- Settings (Saving and Interface Management)
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("LiteHub")
SaveManager:SetFolder("LiteHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Lite Hub",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Load auto-load config if available
SaveManager:LoadAutoloadConfig()
